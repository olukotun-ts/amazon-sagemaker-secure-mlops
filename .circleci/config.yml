# @todo:
    # - Security scan for CloudFormation templates
    #     - AWS CloudFormation Guard: https://docs.aws.amazon.com/cfn-guard/latest/ug/what-is-guard.html
    #     - Snyk: https://snyk.io/blog/scan-aws-cloudformation-misconfigurations-snyk-iac/
    # - Add bucket creation to CloudFormation template. Can source local file: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-cli-creating-stack.html
      
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0

jobs:
  # @todo: Add assertions
  account-checks:
    docker:
      - image: cimg/aws:2023.06
    resource_class: small
    steps:
      - aws-cli/assume_role_with_web_identity:
          role_arn: $AWS_ROLE_ARN
      - run:
          name: Check number of SageMaker domains
          command: |
            # There is a limit of one SageMaker domain per region per account.
            aws sagemaker list-domains
      - run:
          name: Check number of VPCs
          command: |
            # You must have not more than four VPCs to be able to deploy the solution.
            aws ec2 describe-vpcs
      - run: 
          name: Check if SageMaker Service Catalog Products roles exists
          command: |
            # SageMaker uses two execution global roles AmazonSageMakerServiceCatalogProductsLaunchRole and AmazonSageMakerServiceCatalogProductsUseRole.
            # If any of the roles exists in your AWS account, delete the existing role or roles, otherwise the deployment of the solution might fail or MLOps projects will not operate properly.
            aws iam get-role --role-name AmazonSageMakerServiceCatalogProductsUseRole &&
            aws iam get-role --role-name AmazonSageMakerServiceCatalogProductsUseRole

            # @todo:
            #   - Use if-else block to check each role
            #   - Automatically delete role if exists?
            #     - aws iam delete-role --role-name AmazonSageMakerServiceCatalogProductsLaunchRole    
            #     - What if I want multiple SageMaker instances in same account?
            # if aws iam get-role --role-name AmazonSageMakerServiceCatalogProductsUseRole >/dev/null 2>&1; then
            #   echo "AmazonSageMakerServiceCatalogProductsUseRole already exists. Please delete to continue."
            #   exit 1
            # else
            #   echo "AmazonSageMakerServiceCatalogProductsUseRole doesn't exist. OK to continue."
            #   exit 0
            # fi

            # if aws iam get-role --role-name AmazonSageMakerServiceCatalogProductsUseRole >/dev/null 2>&1; then
            #   echo "AmazonSageMakerServiceCatalogProductsUseRole doesn't exist. OK to continue."
            #   exit 0
            # else
            #   echo "AmazonSageMakerServiceCatalogProductsUseRole already exists. Please delete to continue."
            #   exit 1
            # fi
  upload-templates:
    docker:
      - image: cimg/aws:2023.06
    resource_class: medium
    steps:
      - checkout
      - aws-cli/assume_role_with_web_identity:
          role_arn: $AWS_ROLE_ARN
      # @todo:
      #   - automate S3 bucket creation if it does not exist already
      #   - write bucket name to BASH_ENV
      - run:
          name: Package and upload templates
          command: |
            make package CFN_BUCKET_NAME=$S3_BUCKET_NAME DEPLOYMENT_REGION=$AWS_DEFAULT_REGION
      - run:
          name: Verify upload
          command: aws s3 ls s3://${S3_BUCKET_NAME}/sagemaker-mlops/ --recursive
  deploy-core-stack:
    docker:
      - image: cimg/aws:2023.06
    resource_class: small
    environment:
      STACK_NAME: sm-mlops-core
    steps:
      - aws-cli/assume_role_with_web_identity:
          role_arn: $AWS_ROLE_ARN
      - run:
          name: Deploy core infrastructure
          command: |
            aws cloudformation create-stack \
                --template-url https://s3.$AWS_DEFAULT_REGION.amazonaws.com/$S3_BUCKET_NAME/sagemaker-mlops/core-main.yaml \
                --region $AWS_DEFAULT_REGION \
                --stack-name $STACK_NAME  \
                --disable-rollback \
                --capabilities CAPABILITY_NAMED_IAM \
                --parameters \
                    ParameterKey=StackSetName,ParameterValue=$STACK_NAME
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
          no_output_timeout: 1h
  deploy-ds-stack:
    docker:
      - image: cimg/aws:2023.06
    resource_class: small
    environment:
      STACK_NAME: sm-mlops-env
      ENV_NAME: sm-mlops
      STAGING_OU_ID: ""
      PROD_OU_ID: ""
      STAGING_ACCOUNTS: ""
      PROD_ACCOUNTS: ""
      SETUP_STACKSET_ROLE_NAME: $ENV_NAME-setup-stackset-execution-role
    steps:
      - aws-cli/assume_role_with_web_identity:
          role_arn: $AWS_ROLE_ARN
      - run:
          name: Deploy data science environment
          command: |
            aws cloudformation create-stack \
                --template-url https://s3.$AWS_DEFAULT_REGION.amazonaws.com/$S3_BUCKET_NAME/sagemaker-mlops/env-main.yaml \
                --region $AWS_DEFAULT_REGION \
                --stack-name $STACK_NAME \
                --disable-rollback \
                --capabilities CAPABILITY_NAMED_IAM \
                --parameters \
                    ParameterKey=EnvName,ParameterValue=$ENV_NAME \
                    ParameterKey=EnvType,ParameterValue=dev \
                    ParameterKey=AvailabilityZones,ParameterValue=${AWS_DEFAULT_REGION}a\\,${AWS_DEFAULT_REGION}c \
                    ParameterKey=NumberOfAZs,ParameterValue=2 \
                    ParameterKey=StartKernelGatewayApps,ParameterValue=NO \
                    ParameterKey=SeedCodeS3BucketName,ParameterValue=$S3_BUCKET_NAME \
                    ParameterKey=OrganizationalUnitStagingId,ParameterValue=$STAGING_OU_ID \
                    ParameterKey=OrganizationalUnitProdId,ParameterValue=$PROD_OU_ID \
                    ParameterKey=StagingAccountList,ParameterValue=$STAGING_ACCOUNTS \
                    ParameterKey=ProductionAccountList,ParameterValue=$PROD_ACCOUNTS \
                    ParameterKey=SetupStackSetExecutionRoleName,ParameterValue=$SETUP_STACKSET_ROLE_NAME
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
          no_output_timeout: 1h
  delete-stack:
    docker:
      - image: cimg/aws:2023.06
    resource_class: small
    environment:
      ENV_NAME: sm-mlops
    steps:
      - aws-cli/assume_role_with_web_identity:
          role_arn: $AWS_ROLE_ARN
      # - run:
      #     name: Remove VPC-only access policy from buckets
      #     command: |
      #       aws s3api delete-bucket-policy --bucket $ENV_NAME-dev-${AWS_DEFAULT_REGION}-${AWS_ACCOUNT_ID}-data
      #       aws s3api delete-bucket-policy --bucket $ENV_NAME-dev-${AWS_DEFAULT_REGION}-${AWS_ACCOUNT_ID}-models
      # - run:
      #     name: Delete files in data and models S3 buckets
      #     command: |
      #       aws s3 rm s3://$ENV_NAME-dev-$AWS_DEFAULT_REGION-${AWS_ACCOUNT_ID}-data --recursive
      #       aws s3 rm s3://$ENV_NAME-dev-$AWS_DEFAULT_REGION-${AWS_ACCOUNT_ID}-models --recursive
      - run:
          name: Delete CloudFormation stacks
          command: |
            aws cloudformation delete-stack --stack-name sm-mlops-env
            aws cloudformation wait stack-delete-complete --stack-name sm-mlops-env
            aws cloudformation delete-stack --stack-name sm-mlops-core 
            aws cloudformation wait stack-delete-complete --stack-name sm-mlops-core
            # aws cloudformation delete-stack --stack-name sagemaker-mlops-package-cfn
          no_output_timeout: 1h
      - run:
          name: (WIP) Delete EFS
          command: |
            # List SageMaker domain IDs for all EFS with SageMaker tag
            aws efs describe-file-systems \
              --query 'FileSystems[].Tags[?Key==`ManagedByAmazonSageMakerResource`].Value[]'
            
      #       # Delete the EFS
      #       SM_DOMAIN_ID=#SageMaker domain id
      #       pipenv run python3 functions/pipeline/clean-up-efs-cli.py $SM_DOMAIN_ID

workflows:
  deploy_infra:
    jobs:
      - account-checks:
          context: [aws_default]
      - upload-templates:
          context: [aws_default]
          # requires: [account-checks]
      - deploy-core-stack:
          context: [aws_default]
          requires: [upload-templates]
      - deploy-ds-stack:
          context: [aws_default]
          requires: [deploy-core-stack]
      - approve-delete:
          type: approval
          requires: [deploy-ds-stack]
      - delete-stack:
          context: [aws_default]
          requires: [approve-delete]
